

;       MAZE029.ASM
;       14 Dec 2020     L. Johnson      Initial Version
;       27 Feb 2022     L. Johnson      Added additional mazes & features
;       03 Mar 2022     L. Johnson      Update to use room parameters for start & finish
;
;
;
bdos    equ     5       ;jump vector to bdos
wboot   equ     0       ;vector to warm boot
wconf   equ     2       ;bdos write a character to console
wrtline equ     9       ;bdos write a line to the console
rdline  equ     10      ;bdos read a line from console
cr      equ     13      ;ascii carriage return
lf      equ     10      ;ascii line feed
ibuflen equ     100     ;length of input buffer
;
;       Start Transient Program Area
;
        org     0100h   ;CP/M expects us to start at 0100h

;       Setup User Stack
        lxi     sp,stak ;Load address of stack to stack pointer reg
;
;       DISPLAY SPLASH MESSAGE
        LXI     D,MSPLASH        ;DE=ADDRESS OF MAZE SPLASH MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL BDOS
;
;       QUERY PLAYER FOR MAZE NUMBER
QPLYRM: LXI     D,MMAZPR       ;DE=ADDRESS OF PROMPT MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
;
;       GET  RESPONSE
        LXI     D,INBUF ;DE=POINTER TO INPUT BUFFER
        MVI     A,IBUFLEN       ;SET MAXSIZE TO READ
        STAX    D       ;STORE ACCUMLATOR TO THE INPUT BUFFER
        MVI     C,RDLINE        ;C=BDOS READ LINE COMMAND
        CALL BDOS
        lda     inbuf+2 ;1st character of response
        sta     usmaz   ;Store as selected maze (will validate it better later)

;       validate the response
        sui     48      ;Convert from ASCII to binary
        jm      useler
;       jmp     gdrsp
hichk:  lda     usmaz   ;Get User Selected Mase in ASCII
        sui     58      ;verify remainder is less than 10
        jm      gdrsp
;
;
;       User Select Error
useler: LXI     D,mmazer       ;DE=ADDRESS OF Error MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
        jmp     qplyrm  ;Ask User again.

;       Good response - convert from ASCII & store
gdrsp:  lda     usmaz   ;Get ASCII value
        sui     48      ;Convert to binary
        sta     usmaz   ;Store it
        call    upmazs  ;Update the maze sub
;
;
;       INITIALIZE CURRENT OFFSET TO MAZE START
        LDA     MAZESRT       ;LOAD ACCUMULATOR WITH MAZE START
        STA     CUROFF  ;STORE MAZE START OFFSET TO CURRENT OFFSET
;
;       SET CURRENT ROOM FROM MAZESRT (STILL IN REG A)
        LXI     H,MAZE  ;LOAD ADDRESS OF MAZE TO HL REGISTER
        MVI     B,0H    ;CLEAR B REGISTER
        MOV     C,A     ;MOVE CURRENT OFFSET (IN A) TO C
        DAD     B       ;ADD CURRENT ROOM OFFSET TO HL
        MOV     A,M     ;MOVE OFFSET MAZE PARAMETER TO THE ACCUMULATOR
        STA     CURROOM ;STORE ACCUMULATOR AS THE CURRENT ROOM
;
;
;       CHECK IF NEW ROOM OR PREVIOUS ROOM
NRCHK:  CALL    TRINC   ; INCREMENT THE 3 BYTE BCD TURN COUNT
        CALL    DTCNT   ; DISPLAY TURN COUNT
        LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ANI     40H     ;AND ACCUMULATOR WITH PRIOR ROOM VISIT MASK
        JZ      NEWRM   ;ITS ZERO SO IT MUST BE A NEW ROOM
;       PRIOR VISIT
        CALL    DNRCNT  ;DISPLAY NEW ROOM COUNT
        LXI     D,MPRRM ;DE = ADDRESS OF PRIOR ROOM MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
        JMP     CRTOR   ;CREATE ORIENTATION BYTE
;
;       NEW ROOM
NEWRM:  CALL    NRINC   ;INCREMENT NEW ROOM COUNT
        CALL    DNRCNT  ;DISPLAY NEW ROOM COUNT
        LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ORI     40H     ;SET PRIOR ROOM FLAG
        MOV     M,A     ;STORE UPDATED CURRENT ROOM
        LXI     D,MNEWRM        ;DE = ADDRESS OF NEW ROOM MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
;
;       EXIT CHECK
EXCHK:  LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ani     80h     ;AND with Exit Mask
        jz      crtor   ;Not the exit - create orientation byte
;       MAZE EXIT FOUND
        LXI     D,MMAZEX        ;DE=ADDRESS OF MAZE EXIT MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL BDOS
        call    prentr  ;Press enter to continue
        mvi     c, wrtline
        lxi     d, mghist       ;Dots indicate where you were
        call    bdos
        call    pmaze
        call    prentr
        RET     ;RETURN TO CP/M - GAME IS FINISHED
;
;
;       CREATE ORIENTATION BYTE
;
CRTOR:  NOP
        LDA     NORINT  ;NEW ORIENTATION
        STA     OORINT  ;SAVE IT AS OLD ORIENTATION
;       ASSUME WE ARE FACING NORTH
        MVI     B,0H    ;ZERO OUT B REG
        LDA     CURROOM ;LOAD CURRENT ROOM
        ANI     08H     ;CHECK BIT 3 OF ROOM (N DOOR)
        JZ      CHK2    ;NO N DOOR, CHECK FOR S DOOR
        MOV     A,B     ;MOVE B REG TO ACCUMULATOR
        ADI     44H     ;SET BOTH NIBS TO FORWARD DOOR
        MOV     B,A     ;MOVE ACCUMLATOR TO B REG
CHK2:   LDA     CURROOM ;LOAD CURRENT ROOM
        ANI     04H     ;CHECK BIT 2 OF ROOM (S DOOR)
        JZ      CHK1    ;NO S DOOR, CHECK FOR E DOOR
        MOV     A,B     ;MOVE B REG TO ACCUMULATOR
        ADI     11H     ;SET BOTH NIBS TO BACK DOOR
        MOV     B,A     ;MOVE ACCUMLATOR TO B REG
CHK1:   LDA     CURROOM ;LOAD CURRENT ROOM
        ANI     02H     ;CHECK BIT 1 OF ROOM (E DOOR)
        JZ      CHK0    ;NO E DOOR, CHECK FOR W DOOR
        MOV     A,B     ;MOVE B REG TO ACCUMULATOR
        ADI     22H     ;SET BOTH NIBS TO RIGHT DOOR
        MOV     B,A     ;MOVE ACCUMLATOR TO B REG
CHK0:   LDA     CURROOM ;LOAD CURRENT ROOM
        ANI     01H     ;CHECK BIT 0 OF ROOM (W DOOR)
        JZ      TSTOR   ;JUMP TO TEST ACTUAL ORIENTATION
        MOV     A,B     ;MOVE B REG TO ACCUMULATOR
        ADI     88H     ;SET BOTH NIBS TO LEFT DOOR
        MOV     B,A     ;MOVE ACCUMLATOR TO B REG
;       FALL INTO TSTOR
;
;       TEST ROOM ORIENTATION
;               B REG STILL HOLDS ORIENTATION BYTE
;
TSTOR:  LDA DIRFAC      ;LAST USER ENTRY OR LETTER S (1ST TURN)
        CPI     'N'     ;CHECK IF NORTH
        JNZ     CHKW    ;NOT NORTH - CHECK WEST
;       ITS NORTH
        MOV     A,B     ;MOVE B (NORINT) TO A
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     80H     ;SET UPPER NIBBLE TO N
        MOV     B,A     ;MOVE ACCUM TO B REG
        JMP     SAVORT  ;JUMP TO SAVE ORIENTATION
CHKW:   MOV     A,B     ;MOVE B (NORINT) TO A
        RRC             ;SHIFT NORINT RIGHT 1 BIT
        MOV     B,A     ;SAVE NORINT IN B REG
        LDA     DIRFAC  ;LAST USER ENTRY OR LETTER S (1ST TURN)
        CPI     'W'     ;CHECK IF WEST
        JNZ     CHKS    ;NOT WEST CHECK SOUTH
;       ITS WEST
        MOV     A,B     ;MOVE B (NORINT) TO A
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     10H     ;SET UPPER NIBBLE TO W
        MOV     B,A     ;MOVE ACCUM TO B REG
        JMP     SAVORT  ;JUMP TO SAVE ORIENTATION
CHKS:   MOV     A,B     ;MOVE B (NORINT) TO A
        RRC             ;SHIFT NORINT RIGHT 1 BIT
        MOV     B,A     ;SAVE NORINT IN B REG
        LDA     DIRFAC  ;LAST USER ENTRY OR LETTER S (1ST TURN)
        CPI     'S'     ;CHECK IF SOUTH
        JNZ     SETE    ;NOT SOUTH MUST BE EAST
;       ITS SOUTH
        MOV     A,B     ;MOVE B (NORINT) TO A
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     40H     ;SET UPPER NIBBLE TO S
        MOV     B,A     ;MOVE ACCUM TO B REG
        JMP     SAVORT  ;JUMP TO SAVE ORIENTATION
;       ITS EAST
;
SETE:   MOV     A,B     ;MOVE B (NORINT) TO A
        RRC             ;SHIFT NORINT RIGHT 1 BIT
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     20H     ;SET UPPER NIBBLE TO EAST
        MOV     B,A     ;MOVE ACCUM TO B REG
;       FALL INTO SAVE ORIENTATION
;
;       SAVE ORIENTATION
SAVORT: MOV     A,B     ;MOVE B (NORINT) TO A
        STA     NORINT  ;SAVE IN NORINT
;       FALL INTO DISPLAY ORIENTATION
DISORT: NOP             ;DISPLAY ORIENTATION
        CALL    DIS3D   ;CALL 3D DISPLAY SUBROUTINE
;
DISROOM: NOP     ;DISPLAY ROOM AND QUERY PLAYER FOR DIRECTION
;
;       TEST CURRENT ROOM TO SEE IF IT HAS ONLY ONE EXIT
        LDA     CURROOM ; LOAD ACCUMMULATOR WITH THE CURRENT ROOM
        ANI     20H     ;AND THE ACCUMULATOR WITH THE SINGLE
                        ;EXIT MASK WORD
        JZ      MEXITS  ;GO TO MANY EXITS SINCE Z FLAG WAS 0
;
;       DISPLAY TEXT FOR ROOM WITH ONLY ONE EXIT
        LXI     D,MSEXIT        ;DE = ADDRESS OF SINGLE EXIT MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WITE LINE COMMAND
        CALL    BDOS
        JMP     DEXITS  ;DISPLAY AVAILABLE EXITS
;
;       DISPLAY TEXT FOR ROOM WITH MULTIPLE EXITS
MEXITS: LXI     D,MMEXIT        ;DE = ADDRESS OF MULTI EXIT MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
;       FALL INTO DEXITS
;
;       DISPLAY EXITS
;
DEXITS: LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ANI     08H     ;AND ACCUMULATOR WITH NORTH MASK
        JZ      SCHK    ;JUMP TO SOUTH CHECK IF NO NORTH EXIT
        LXI     D,NMESS ;PREPARE NORTH MESSAGE TO PRINT
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL    BDOS
SCHK:   LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ANI     04H     ;AND ACCUMULATOR WITH SOUTH MASK
        JZ      ECHK    ;JUMP TO EAST CHECK IF NO SOUTH EXIT
        LXI     D,SMESS ;PREPARE SOUTH MESSAGE TO PRINT
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMNAD
        CALL    BDOS
ECHK:   LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ANI     02H     ;AND ACCUMULATOR WITH EAST MASK
        JZ      WCHK    ;JUMP TO WEST CHECK IF NO EAST EXIT
        LXI     D,EMESS ;PREPARE EAST MESSAGE TO PRINT
        MVI     C,WRTLINE       ;C=-B\\BDOS WRITE COMMAND
        CALL    BDOS
WCHK:   LDA     CURROOM ;LOAD ACCUMULATOR WITH THE CURRENT ROOM
        ANI     01H     ;AND ACCUMULATOR WITH THE WEST MASK
        JZ      QPLYR   ; JUMP TO QUERY THE PLAYER FOR DIRECTION
        LXI     D,WMESS ;PREPARE WEST MESSAGE TO PRINT
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL    BDOS
;
;       QUERY PLAYER FOR DIRECTION
;
QPLYR:  LXI     D,MPROMPT       ;DE=ADDRESS OF PROMPT MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE COMMAND
        CALL BDOS
;
;       GET PLAYER'S RESPONSE
;
        LXI     D,INBUF ;DE=POINTER TO INPUT BUFFER
        MVI     A,IBUFLEN       ;SET MAXSIZE TO READ
        STAX    D       ;STORE ACCUMLATOR TO THE INPUT BUFFER
        MVI     C,RDLINE        ;C=BDOS READ LINE COMMAND
        CALL BDOS
;
;       VALIDATE RESPONSE
;
VALRSP:  LDA     INBUF+2 ;GET 1ST CHARACTER OF THE RESPONSE
        ANI     0DFH    ;CONVERT TO UPPER CASE
        STA     INBUF+2 ;STORE FOR TESTING
        STA     DIRFAC  ;STORE FOR ORIENTATION TEST
;
;       CHECK FOR EXIT
;
        CPI     'X'     ;COMPARE ACCUMULATOR WITH LETTER, X
        JNZ     PKEYP   ;NOT X, Check if letter P entered
        RET             ;RETURN TO CP/M
;
;       Check for Print Maze
;
pkeyp:  NOP     ;P key pressed check
        CPI     'P'     ;COMPARE ACCUMULATOR WITH LETTER, P
        JNZ     NQUER   ;NOT P, JUMP TO NORTH QUERY CHECK
        call    pmaze
        JMP     DISROOM ;DISPLAY exits AND REPEAT DIRECTION QUERY
;
;       CHECK FOR NORTH
;
NQUER:   CPI     'N'     ;COMPARE ACCUMULATOR WITH LETTER, N
        JNZ     SQUER   ;NOT NORTH, JUMP TO SOUTH QUERY CHECK
;
;       ITS NORTH - CHECK IF NORTH IS A VALID DIRECTION
        LDA     CURROOM ;PUT CURRENT ROOM INTO ACCUMULATOR
        ANI     08H     ;AND WITH NORTH MASK
        JZ      DIRBAD  ;THE DIRECTION IS BAD - PRINT MESSAGE
;
;       WE ARE GOING NORTH
        LDA     CUROFF  ;LOAD ACCUMULATOR WITH CURRENT ROOM OFFSET
        SUI     0AH     ;SUBTRACT 10 FROM ROOM OFFSET
        STA     CUROFF  ;STORE UPDATED ROOM OFFSET
        JMP     UPDTRM  ;UPDATE TO NEW ROOM
;
;       CHECK FOR SOUTH
;
SQUER:   LDA     INBUF+2 ;GET 1ST CHARACTER OF THE RESPONSE
        CPI     'S'     ;COMPARE THE ACCUMULATOR WITH THE LETTER, S
        JNZ     EQUER   ;NOT SOUTH- JUMP TO EAST QUERY CHECK
;
;       ITS SOUTH - CHECK IF SOUTH IS A VALID DIRECTION
        LDA     CURROOM ;PUT CURRENT ROOM INTO ACCUMULATOR
        ANI     04H     ;AND WITH SOUTH MASK
        JZ      DIRBAD  ;THE DIRECTION IS BAD, PRINT MESSAGE
;
;       WE ARE GOING SOUTH
        LDA     CUROFF  ;LOAD ACCUMULATOR WITH CURRENT OFFSET
        ADI     0AH     ;ADD 10 TO THE ROOM OFFSET
        STA     CUROFF  ;STORE UPDATED ROOM OFFSET
        JMP     UPDTRM  ;JUMP TO UPDATE ROOM
;
;       CHECK FOR EAST
;
EQUER:   LDA     INBUF+2 ;GET 1ST CHARACTER OF THE RESPONSE
        CPI     'E'     ;COMPARE THE ACCUMULATOR WITH THE LETTER, E
        JNZ     WQUER   ;NOT EAST, JUMP TO WEST QUERY CHECK
;
;       ITS EAST - CHECK IF EAST IS A VALID DIRECTION
        LDA     CURROOM ;PUT CURRENT ROOM INTO THE ACCUMULATOR
        ANI     02H     ;AND WITH EAST MASK
        JZ      DIRBAD  ;THE DIRECTION IS BAD, PRINT MESSAGE
;
;       WE ARE GOING EAST
        LDA     CUROFF  ;LOAD ACCUMULATOR WITH THE CURRENT ROOM OFFSET
        ADI     01H     ;ADD 1 TO THE ROOM OFFSET
        STA     CUROFF  ;STORE THE UPDATED ROOM OFFSET
        JMP     UPDTRM  ;JUMP TO UPDATE ROOM
;
;       WEST CHECK
;
WQUER:  LDA     INBUF+2 ;GET 1ST CHARACTER OF THE RESPONSE
        CPI     'W'     ;COMPARE ACCUMULATOR WITH THE LETTER, W
        JNZ     RSPBAD  ;NOT N,S,E OR W - PRINT BAD RESPONSE MESSAGE
;
;       ITS WEST - CHECK IF WEST IS A VALID DIRECTION
        LDA     CURROOM ;PUT CURRENT ROOM INTO ACCUMULATOR
        ANI     01H     ;AND WITH WEST MASK
        JZ      DIRBAD  ;THE DIRECTION IS BAD, PRINT MESSAGE
;
;       WE ARE GOING WEST
        LDA     CUROFF  ;LOAD ACCUMULATOR WITH CURRENT OFFSET
        SUI     01H     ;SUBTRACT 1 FROM THE ROOM OFFSET
        STA     CUROFF  ;STORE UPDATED ROOM OFFSET
        JMP     UPDTRM  ;JUMP TO UPDATE ROOM
;
;       UPDATE CURRENT ROOM
UPDTRM: LXI     H,MAZE  ;LOAD ADDRESS OF MAZE TO HL REGISTER
        MVI     B,0H    ;CLEAR B REGISTER
        LDA     CUROFF  ;MOVE CURRENT OFFSET TO ACCUMULATOR
        MOV     C,A     ;MOVE CURRENT OFFSET TO C
        DAD     B       ;ADD CURRENT ROOM OFFSET TO HL
        MOV     A,M     ;MOVE OFFSET MAZE PARAMETER TO THE ACCUMULATOR
        STA     CURROOM ;STORE ACCUMULATOR AS THE CURRENT ROOM
        JMP     NRCHK   ;LOOP BACK TO NRCHK (NEW ROOM CHECK)
;
;       BAD RESPONSE FROM PLAYER (NOT N, S, E OR W)
RSPBAD: LXI     D,MBADR ;DE=ADDRESS OF BAD RESPONSE MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL    BDOS
        JMP     DISROOM ;DISPLAY ROOM & REPEAT DIRECTION QUERY
;
;       PRINT BAD DIRECTION
DIRBAD: LXI     D,MBADD ;DE=ADDRESS OF BAD DIRECTION MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL BDOS
        JMP     DISROOM ;DISPLAY ROOM AND REPEAT DIRECTION QUERY
;
        NOP
        NOP
        NOP;
;
;*******END OF PART 1********

;*******START OF PART 2********;
;       SUBROUTINE AREA
;
;       DISPLAY 3D ROOM
DIS3D:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
;
;       PERFORM CHECKS FOR THE ADDING AND REMOVAL OF DOORS
        LDA     NORINT  ;LOAD ORIENTATION BYTE
        ANI     08H     ;CHECK IF LEFT DOOR IS PRESENT
        JNZ     DLFT    ;DOOR ON THE LEFT
        CALL    RMLEFT  ;REMOVE LEFT DOOR
        JMP     DCHK2   ;GO TO DOOR CHECK 2 (FORWARD)
DLFT:   CALL    ADLEFT  ;ADD LEFT DOOR
DCHK2:  LDA     NORINT  ;LOAD ORIENTATION BYTE
        ANI     04H     ;CHECK IF FORWARD DOOR IS PRESENT
        JNZ     DFWD    ;DOOR IS FOWARD
        CALL    RMFWD  ;REMOVE FORWARD DOOR
        JMP     DCHK3   ;GO TO DOOR CHECK 3 (RIGHT)
DFWD:   CALL    ADFWD   ;ADD FORWARD DOOR
DCHK3:  LDA     NORINT  ;LOAD ORIENTATION BYTE
        ANI     02H     ;CHECK IF RIGHT DOOR IS PRESENT
        JNZ     DRGT    ;DOOR IS RIGHT
        CALL    RMRGHT  ;REMOVE RIGHT DOOR
        JMP     LBLBK   ;WE ARE DONE - LABEL THE BACK DOOR
DRGT:   CALL    ADRGHT  ;ADD RIGHT DOOR
LBLBK:  CALL    BKDRCK  ;BACK DOOR CHECK
;
        LXI     H,MRMVIEW       ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
;       PRINT NEXT LINE
PNEXT:  MOV     D,H     ; LOAD D REG WITH H
        MOV     E,L     ; LOAD E REG WITH L
        MVI     C,WRTLINE       ;C=BDOS WRITE LINE
        CALL    BDOS
;
        POP H   ; RESTORE REGISTERS FOR TURN INREMENT ROUTINE
        POP D
        POP B
        RET
;
;       BACK DOOR CHECK
BKDRCK: NOP
        LDA     TCNT1   ;GET LEAST SIG BYTE OF TURN COUNT
        CPI     01H     ;IS IT TURN 1?
        JZ      BDCX    ;IF 1, GO TO BACK DOOR CHECK EXIT
        CALL    LBLBKR  ;LABEL BACK DOOR
        CALL    ADDAR   ;ADD DIRECTION ARROW
BDCX:   RET             ;RETURN TO DISPLAY 3D ROOM ROUTINE (DIS3D)
;
;       ADD ARROW
ADDAR:  MVI     A,'|'   ;ARROW SHAFT
        STA     MRMVIEW+857
        STA     MRMVIEW+858
        MVI     A,'\'   ;LEFT SIDE OF ARROW
        STA     MRMVIEW+906
        MVI     A,'/'   ;RIGHT SIDE OF ARROW
        STA     MRMVIEW+907
        RET
;
;       REMOVE LEFT DOOR
RMLEFT: PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        MVI     A,' '   ;LOAD A SPACE INTO A
        STA     MRMVIEW+250     ;UPPER LEFT CORNER OF DOOR
        STA     MRMVIEW+302     ;UPPER PART OF DOOR
        STA     MRMVIEW+354     ;UPPER PART OF DOOR
        STA     MRMVIEW+406     ;UPPER PART OF DOOR
;       NOW DO LEFT SIDE
        MVI     B,0DH   ;INITIALIZE COUNTER TO 13
        LXI     H,MRMVIEW+299   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX1:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX1    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO RIGHT SIDE
        MVI     B,06H   ;INITIALIZE COUNTER TO 6
        LXI     H,MRMVIEW+455   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX2:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX2    ;PRINT THE NEXT LINE IF NOT ZERO
;       DIRECTION LABEL
        STA     MRMVIEW+448
        STA     MRMVIEW+449
        STA     MRMVIEW+450
        STA     MRMVIEW+451
        STA     MRMVIEW+452
;       DOOR LABEL
        STA     MRMVIEW+497
        STA     MRMVIEW+498
        STA     MRMVIEW+499
        STA     MRMVIEW+500
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;
;       REMOVE RIGHT DOOR
RMRGHT: PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        MVI     A,' '   ;LOAD A SPACE INTO A
        STA     MRMVIEW+290     ;UPPER LEFT CORNER OF DOOR
        STA     MRMVIEW+336     ;UPPER PART OF DOOR
        STA     MRMVIEW+382     ;UPPER PART OF DOOR
        STA     MRMVIEW+428     ;UPPER PART OF DOOR
;       NOW DO RIGHT SIDE
        MVI     B,0DH   ;INITIALIZE COUNTER TO 13
        LXI     H,MRMVIEW+339   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX3:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX3    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO LEFT SIDE
        MVI     B,06H   ;INITIALIZE COUNTER TO 6
        LXI     H,MRMVIEW+477   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX4:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX4    ;PRINT THE NEXT LINE IF NOT ZERO
;       DIRECTION LABEL
        STA     MRMVIEW+479
        STA     MRMVIEW+480
        STA     MRMVIEW+481
        STA     MRMVIEW+482
        STA     MRMVIEW+483
;       DOOR LABEL
        STA     MRMVIEW+528
        STA     MRMVIEW+529
        STA     MRMVIEW+530
        STA     MRMVIEW+531
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;
;       REMOVE FORWARD DOOR
RMFWD:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        MVI     A,' '   ;LOAD A SPACE INTO A
;       NOW DO TOP
        MVI     B,0BH   ;INITIALIZE COUNTER TO 11
        LXI     H,MRMVIEW+412   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX5:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,01H   ;LOAD REGS DE WITH 01 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX5    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO LEFT SIDE
        STA     MRMVIEW+461     ;LEFT SIDE OF DOOR
        STA     MRMVIEW+510
        STA     MRMVIEW+559
        STA     MRMVIEW+608
        STA     MRMVIEW+657
;       NOW DO RIGHT SIDE
        STA     MRMVIEW+471     ;RIGHT SIDE OF DOOR
        STA     MRMVIEW+520
        STA     MRMVIEW+569
        STA     MRMVIEW+618
        STA     MRMVIEW+667
;       DIRECTION LABEL
        STA     MRMVIEW+513
        STA     MRMVIEW+514
        STA     MRMVIEW+515
        STA     MRMVIEW+516
        STA     MRMVIEW+517
;       DOOR LABEL
        STA     MRMVIEW+562
        STA     MRMVIEW+563
        STA     MRMVIEW+564
        STA     MRMVIEW+565
;       BASE OF FORWARD WALL
        MVI     A,'-'   ;LOAD A DASH INTO A
        STA     MRMVIEW+706
        STA     MRMVIEW+716
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;
;       ADD LEFT DOOR
ADLEFT: PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        MVI     A,'+'   ;LOAD A PLUS SIGN INTO A
        STA     MRMVIEW+250     ;UPPER LEFT CORNER OF DOOR
        STA     MRMVIEW+302     ;UPPER PART OF DOOR
        STA     MRMVIEW+354     ;UPPER PART OF DOOR
        STA     MRMVIEW+406     ;UPPER PART OF DOOR
;       NOW DO LEFT SIDE
        MVI     A,'|'   ;LOAD A VERTICAL LINE INTO A
        MVI     B,0DH   ;INITIALIZE COUNTER TO 13
        LXI     H,MRMVIEW+299   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX6:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX6    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO RIGHT SIDE
        MVI     B,06H   ;INITIALIZE COUNTER TO 6
        LXI     H,MRMVIEW+455   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX7:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX7    ;PRINT THE NEXT LINE IF NOT ZERO
;       DIRECTION LABEL
        CALL LBLLDR     ;CALL LABEL LEFT DOOR ROUTINE
        CALL LBLDRW     ;CALL LABEL LEFT DOOR WORD
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;
;       ADD RIGHT DOOR
ADRGHT: PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        MVI     A,'+'   ;LOAD A PLUS SIGN INTO A
        STA     MRMVIEW+290     ;UPPER LEFT CORNER OF DOOR
        STA     MRMVIEW+336     ;UPPER PART OF DOOR
        STA     MRMVIEW+382     ;UPPER PART OF DOOR
        STA     MRMVIEW+428     ;UPPER PART OF DOOR
;       NOW DO RIGHT SIDE;
        MVI     A,'|'   ;LOAD A VERTICAL LINE INTO A
        MVI     B,0DH   ;INITIALIZE COUNTER TO 13
        LXI     H,MRMVIEW+339   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX8:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX8    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO LEFT SIDE
        MVI     B,06H   ;INITIALIZE COUNTER TO 6
        LXI     H,MRMVIEW+477   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX9:   STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,31H   ;LOAD REGS DE WITH 49 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX9    ;PRINT THE NEXT LINE IF NOT ZERO
;       DIRECTION LABEL
        CALL LBLRDR     ;CALL LABEL RIGHT DOOR ROUTINE
        CALL LBRDRW     ;CALL LABEL RIGHT DOOR WORD
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;
;       ADD FORWARD DOOR
ADFWD:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
;       NOW DO CORNERS
        MVI     A,'+'   ;LOAD A PLUS SIGN INTO A
        STA     MRMVIEW+412
        STA     MRMVIEW+422
        STA     MRMVIEW+706
        STA     MRMVIEW+716
;       NOW DO TOP
        MVI     A,'-'   ;LOAD A DASH INTO A
        MVI     B,09H   ;INITIALIZE COUNTER TO 9
        LXI     H,MRMVIEW+413   ;LOAD ADDRESS OF ROOM VIEW MESS TO HL REG
        XCHG            ;EXCHANGE HL WITH DE
PNX10:  STAX    D       ;STORE ACCUM TO MEM IN REG DE
        XCHG            ;EXCHANGE DE WITH HL
        LXI     D,01H   ;LOAD REGS DE WITH 01 DEC
        DAD     D       ;ADD REGS DE TO HL
        XCHG            ;EXCHANGE HL WITH DE
;       TEST AND JUMP IF NOT DONE
        DCR     B       ;DECREMENT THE COUNTER
        JNZ     PNX10    ;PRINT THE NEXT LINE IF NOT ZERO
;       NOW DO LEFT SIDE
        MVI     A,'|'   ;LOAD A VERTICAL LINE INTO A
        STA     MRMVIEW+461     ;LEFT SIDE OF DOOR
        STA     MRMVIEW+510
        STA     MRMVIEW+559
        STA     MRMVIEW+608
        STA     MRMVIEW+657
;       NOW DO RIGHT SIDE
        STA     MRMVIEW+471     ;RIGHT SIDE OF DOOR
        STA     MRMVIEW+520
        STA     MRMVIEW+569
        STA     MRMVIEW+618
        STA     MRMVIEW+667
        CALL LBLFDR     ;CALL LABEL FORWARD DOOR ROUTINE
        CALL LBFDRW     ;CALL LABEL FORWARD DOOR WORD
;       RESTORE REGISTERS
        POP H
        POP D
        POP B
        RET
;*******END OF PART 2********
;*******START OF PART 3********;
;
;       LABEL LEFT DOOR ROUTINE
LBLLDR: NOP
        LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     80H     ;MASK WITH FACING NORTH BIT
        JZ      LLCHK2  ;NOT FACING NORTH CHECK IF FACING SOUTH
;       LABEL LEFT DOOR AS WEST
        LXI     H,WMESS        ;ADDRESS OF WEST MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LLDEST   ;LOAD DESTINATION ADDR
LLCHK2: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     40H     ;MASK WITH FACING SOUTH BIT
        JZ      LLCHK3  ;NOT FACING SOUTH CHECK IF EAST
;       LABEL LEFT DOOR AS EAST
        LXI     H,EMESS        ;ADDRESS OF EAST MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LLDEST   ;LOAD DESTINATION ADDR
LLCHK3: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     20H     ;MASK WITH FACING EAST BIT
        JZ      LLCHK4  ;NOT FACING EAST MUST BE WEST
;       LABEL LEFT DOOR AS NORTH
        LXI     H,NMESS        ;ADDRESS OF NORTH MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LLDEST   ;LOAD DESTINATION ADDR
;       LABEL LEFT DOOR AS SOUTH (WHAT ELSE IS THERE?)
LLCHK4: LXI     H,SMESS        ;ADDRESS OF EAST DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
LLDEST: LXI     H,MRMVIEW+448   ;ADDR OF DESTINATION TO HL
        CALL    DISLBL  ;DISPLAY LABEL
        RET
;
;       LABEL RIGHT DOOR ROUTINE
LBLRDR: NOP
        LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     80H     ;MASK WITH FACING NORTH BIT
        JZ      LRCHK2  ;NOT FACING NORTH CHECK IF FACING SOUTH
;       LABEL LEFT DOOR AS EAST
        LXI     H,EMESS        ;ADDRESS OF EAST MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LRDEST   ;LOAD DESTINATION ADDR
LRCHK2: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     40H     ;MASK WITH FACING SOUTH BIT
        JZ      LRCHK3  ;NOT FACING SOUTH CHECK IF EAST
;       LABEL LEFT DOOR AS WEST
        LXI     H,WMESS        ;ADDRESS OF WEST MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LRDEST   ;LOAD DESTINATION ADDR
LRCHK3: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     20H     ;MASK WITH FACING EAST BIT
        JZ      LRCHK4  ;NOT FACING EAST MUST BE WEST
;       LABEL LEFT DOOR AS SOUTH
        LXI     H,SMESS        ;ADDRESS OF SOUTH MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LRDEST   ;LOAD DESTINATION ADDR
;       LABEL LEFT DOOR AS NORTH (WHAT ELSE IS THERE?)
LRCHK4: LXI     H,NMESS        ;ADDRESS OF EAST DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
LRDEST: LXI     H,MRMVIEW+479   ;ADDR OF DESTINATION TO HL
        CALL    DISLBL  ;DISPLAY LABEL
        RET
;
;       LABEL FORWARD DOOR ROUTINE
LBLFDR: NOP
        LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     80H     ;MASK WITH FACING NORTH BIT
        JZ      LFCHK2  ;NOT FACING NORTH CHECK IF FACING SOUTH
;       LABEL FORWARD DOOR AS NORTH
        LXI     H,NMESS        ;ADDRESS OF NORTH MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LFDEST   ;LOAD DESTINATION ADDR
LFCHK2: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     40H     ;MASK WITH FACING SOUTH BIT
        JZ      LFCHK3  ;NOT FACING SOUTH CHECK IF EAST
;       LABEL FORWARD DOOR AS SOUTH
        LXI     H,SMESS        ;ADDRESS OF SOUTH MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LFDEST   ;LOAD DESTINATION ADDR
LFCHK3: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     20H     ;MASK WITH FACING EAST BIT
        JZ      LFCHK4  ;NOT FACING EAST MUST BE WEST
;       LABEL FORWARD DOOR AS EAST
        LXI     H,EMESS        ;ADDRESS OF EAST MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LFDEST   ;LOAD DESTINATION ADDR
;       LABEL FORWARD DOOR AS WEST (WHAT ELSE IS THERE?)
LFCHK4: LXI     H,WMESS        ;ADDRESS OF WEST DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
LFDEST: LXI     H,MRMVIEW+513   ;ADDR OF DESTINATION TO HL
        CALL    DISLBL  ;DISPLAY LABEL
        RET
;
;       LABEL BACK DOOR ROUTINE
LBLBKR: NOP
        LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     80H     ;MASK WITH FACING NORTH BIT
        JZ      LBCHK2  ;NOT FACING NORTH CHECK IF FACING SOUTH
;       LABEL BACK DOOR AS SOUTH
        LXI     H,SDMESS        ;ADDRESS OF SOUTH DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LDEST   ;LOAD DESTINATION ADDR
LBCHK2: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     40H     ;MASK WITH FACING SOUTH BIT
        JZ      LBCHK3  ;NOT FACING SOUTH CHECK IF EAST
;       LABEL BACK DOOR AS NORTH
        LXI     H,NDMESS        ;ADDRESS OF NORTH DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LDEST   ;LOAD DESTINATION ADDR
LBCHK3: LDA     NORINT  ;GET ORIENTATION BYTE
        ANI     20H     ;MASK WITH FACING EAST BIT
        JZ      LBCHK4  ;NOT FACING EAST MUST BE WEST
;       LABEL BACK DOOR AS WEST
        LXI     H,WDMESS        ;ADDRESS OF WEST DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
        JMP     LDEST   ;LOAD DESTINATION ADDR
;       LABEL BACK DOOR AS EAST (WHAT ELSE IS THERE?)
LBCHK4: LXI     H,EDMESS        ;ADDRESS OF EAST DOOR MESSAGE TO HL
        XCHG    ;PUT SOURCE CHAR ADDR INTO DE
LDEST:  LXI     H,MRMVIEW+804   ;ADDR OF DESTINATION TO HL
        CALL    DISLBL  ;DISPLAY LABEL
        RET
;
;       LABEL LEFT DOOR WORD
LBLDRW: MVI     A,'D'   ;LOAD LETTER D INTO A
        STA     MRMVIEW+497
        MVI     A,'O'   ;LOAD LETTER O INTO A
        STA     MRMVIEW+498
        STA     MRMVIEW+499
        MVI     A,'R'   ;LOAD LETTER R INTO A
        STA     MRMVIEW+500
        RET
;
;       LABEL RIGHT DOOR WORD
LBRDRW: MVI     A,'D'   ;LOAD LETTER D INTO A
        STA     MRMVIEW+528
        MVI     A,'O'   ;LOAD LETTER O INTO A
        STA     MRMVIEW+529
        STA     MRMVIEW+530
        MVI     A,'R'   ;LOAD LETTER R INTO A
        STA     MRMVIEW+531
        RET
;
;       LABEL FORWARD DOOR WORD
LBFDRW: MVI     A,'D'   ;LOAD LETTER D INTO A
        STA     MRMVIEW+562
        MVI     A,'O'   ;LOAD LETTER O INTO A
        STA     MRMVIEW+563
        STA     MRMVIEW+564
        MVI     A,'R'   ;LOAD LETTER R INTO A
        STA     MRMVIEW+565
        RET
;
;       DISPLAY LABEL ROUTINE
;       ASSUME HL CONTAINS DESTINATION ADDRESS
;       ASSUME DE CONTAINS SOURCE ADDRESS
DISLBL: LDAX    D       ;LOAD ACCUM WITH SOURCE CHAR
        CPI     '$'     ;CHECK IF TERMINATING CHARACTER
        JZ      DDONE   ;IT IS, JUMP TO DISPLAY DONE
        LDAX    D       ;LOAD ACCUM WITH SOURCE CHAR
        XCHG            ;EXCHANGE DE WITH HL
        STAX    D       ;STORE ACCUM TO DEST
        INX     H       ;INCREMENT HL (SOURCE CHARS)
        INX     D       ;INCREMENT DE (DEST ADDR)
        XCHG            ;PUT SOURCE IN DE
        JMP     DISLBL  ;DO NEXT CHARACTER
DDONE:  RET
;
;       TURN INCREMENT
TRINC:  PUSH   B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        LDA     TCNT1   ;LOAD ACCUMULATOR WITH LEAST SIG DIGITS OF TURN COUNT
        ADI     1       ;ADD 1 TO THE ACCUMULATOR
        DAA             ;ADJUST THE ACCUMULATOR
        JNC     TRST    ;NO CARRY SO UPDATE TCNT1, RESTORE REGISTERS AND RETURN
;       THERE IS A CARRY SO INCREMENT MOST SIG DIGIT OF TURN COUNT
        LDA     TCNT2   ;LOAD ACCUMULATOR WITH MOST SIG DIGIT OF TURN COUNT
        ADI     1       ;ADD 1 TO THE ACCUMULATOR
        STA     TCNT2   ;SAVE UPDATED TURN COUNT SIG DIGIT

TRST:   LDA     TCNT1   ;LOAD ACCUMULATOR WITH LEAST SIG DIGITS OF TURN COUNT
        ADI     1       ;ADD 1 TO THE ACCUMULATOR
        DAA             ;ADJUST THE ACCUMULATOR
        STA     TCNT1   ;SAVE UPDATED TURN COUNT
        POP H   ; RETORE REGISTERS FOR TURN INREMENT ROUTINE
        POP D
        POP B
        RET

;       NEW ROOM INCREMENT
NRINC:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        LDA     NRCNT   ;LOAD A WITH BYTE CONTAINING THE NEW ROOM COUNT
        ADI     1       ;ADD 1 TO THE ACCUMULATOR
        DAA             ;ADJUST THE ACCUMULATOR
        STA     NRCNT   ;SAVE UPDATED NEW TURN COUNT
        POP     H       ;RESTORE REGISTERS
        POP     D
        POP     B
        RET
;
;       DISPLAY TURN COUNT
DTCNT:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        LXI     D,MTRNUM        ;DE = ADDRESS OF TURN NUMBER MESSAGE
        MVI     C,WRTLINE       ;C=BDOS WITE LIN
        CALL    BDOS
        LDA     TCNT2   ;LOAD ACCUMULATOR WITH MOST SIG DIGITS OF TURN COUNT
        STA     BCDDIG  ;STORE TCNT2 IN BCD DIGIT BYTE
        CALL    DBCDD   ;DISPLAY BCD DIGIT
        LDA     TCNT1   ;LOAD ACCOUMULATER WITH LEAST SIG DIGITS OF TURN COUNT
        STA     BCDDIG  ;STORE TCNT1 IN BCD DIGIT BYTE
        CALL    DBCDD   ;DISPLAY BCD DIGIT
        POP     H       ;RESTORE REGISTERS
        POP     D
        POP     B
        RET
;
;       DISPLAY NEW ROOM COUNT
DNRCNT: PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
        LXI     D,MNRCNT        ;DE = ADDRESS OF NEW ROOM COUNT MESS
        MVI     C,WRTLINE       ;C=BDOS WITE LIN
        CALL    BDOS
        LDA     NRCNT   ;LOAD ACCUMULATOR WITH NEW ROOM COUNT
        STA     BCDDIG  ;STORE NRCNT IN BCD DIGIT BYTE
        CALL    DBCDD   ;DISPLAY BCD DIGIT
        POP H   ; RETORE REGISTERS FOR TURN INREMENT ROUTINE
        POP D
        POP B
        RET
;
;       DISPLAY BCD DIGITS FROM BYTE STORED AT BCDDIG
DBCDD:  PUSH    B       ;SAVE REGISTERS
        PUSH    D
        PUSH    H
;
;       FIRST DO THE MOST SIGNIFICANT BCD DIGIT OF THE BYTE
        LDA     BCDDIG  ;LOAD ACCUMULATOR WITH BYTE CONTAINING BCD DIGITS
        RRC             ;ROTATE THE ACCUMULATOR RIGHT 4 TIMES TO MOVE THE
        RRC             ;UPPER NIBBLE TO THE LOWER NIBBLE
        RRC
        RRC
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     30H     ;CONVERT TO ASCII
        MOV     E,A     ;MOVE ACCUMULATOR TO E REGISTER
        MVI     C,WCONF ;C=BDOS WRITE CHAR TO CONSOLE COMMAND
        CALL    BDOS
;
;       NOW TO THE LEAST SIGNFICANT BCD DIGIT OF THE BYTE
        LDA     BCDDIG  ;LOAD ACCOUMULATER WITH LEAST SIG DIGITS OF TURN COUNT
        ANI     0FH     ;CLEAR UPPER NIBBLE
        ADI     30H     ;CONVERT TO ASCII
        MOV     E,A     ;MOVE ACCUMULATOR TO E REGISTER
        MVI     C,WCONF ;C=BDOS WRITE CHAR TO CONSOLE COMMAND
        CALL    BDOS

        POP H   ; RETORE REGISTERS FOR TURN INREMENT ROUTINE
        POP D
        POP B
        RET
;
;       Print Maze Subroutine
pmaze:  push    b       ;save registers
        push    d
        push    h
;       print northern edge of maze
        mvi     c, wrtline
        lxi     d, mnedge       ;Print Maze north edge
        call    bdos
;       Some preliminaries before the row loop
;       Get Maze address and store in HL
        lxi     h,maze  ;LOAD ADDRESS OF MAZE TO HL REGISTER
        shld    HLREG1  ;Save address for debug
        mov     a,m     ;MOVE OFFSET MAZE PARAMETER TO THE ACCUMULATOR
        sta     prval   ;store value of room to be printed as prval
        mvi     b,0ah   ;initialize counter to 10
        ani     00h     ;Clear Accumulator
        sta     proff;  ;store as accumulator offset
rloop:  nop     ;This is the outer row loop
        push    b;
        lhld    HLREG1  ;Get current value of HL
        shld    HLREG2  ;Save the location  - (start of the row)
;       Some preliminaries before the column loop
        mvi     c, wrtline
        lxi     d, spc3
        call    bdos    ;write 3 spaces
;       print left side of maze
        mvi     c,wconf
        mvi     e,'|'
        call    bdos
        mvi     b,0ah   ;initialize counter to 10
;       Here is the inner (column) loop
cloop:  nop     ;this is the inner most column loop
        push    b       ;Save b - (bdos calls mess with it)
        lhld    HLREG1
        mov     a,m     ;get value of maze
        sta     prval   ;store it
        inx     h       ;Increment the address in HL
        shld    HLREG1
;       Check if this is the current room
        lda     proff   ;get printed room offset
        mov     b,a     ;Move accumlator to b
        lda     CUROFF  ;Get current room offset
        cmp     b       ;compare a to b
        jnz     strchk; Not the current room - check if start
;       It is the start.  Print a ' X '
        mvi     c,wrtline
        lxi     d,msxs  ;message,space,letter X,space
        call    bdos
        jmp     edrchk  ;Check if there is an east door
;       Check if this is the maze start
strchk: lda     prval   ;get room value for print sub
        ani     10h     ;AND with Start Mask
        jz      finchk  ;Not the start - check if
;       It is the start.  Print a ' S '
        mvi     c,wrtline
        lxi     d,msss  ;message,space,letter S,space
        call    bdos
        jmp     edrchk  ;Check if there is an east door
;       Check if this is the maze finish
finchk: lda     prval   ;get room value for print sub
        ani     80h     ;AND with Exit Mask
        jz     prmchk  ;Not the exit - print the contents
;       print a ' F 'indicating room is the maze finish
        mvi     c,wrtline
        lxi     d,msfs  ;message,space,letter F,space
        call    bdos
        jmp     edrchk  ;Check if there is an east door
;       Check if room has been visited
prmchk: lda     prval   ;get room value for print sub
        ani     40h     ;AND with Previous Visit Mask
        jz      pspce   ;not visited before - print space
;       print a ' . 'indicating room was previously visited
        mvi     c,wrtline
        lxi     d,msps  ;message,space,period,space
        call    bdos
        jmp     edrchk  ;Check if there is an east door
pspce: nop     ;Print space
;       print a space indicating room has not been visited
        mvi     c,wrtline
        lxi     d,spc3
        call    bdos
;       Check if there is an east door
edrchk: lda     prval   ;get room value for print sub
        ani     02h     ;AND with East Mask
        jz      nedoor  ;no east door - print wall

;       print a " " indicating room has an east door
        mvi     c,wconf
        mvi     e,' '
        call    bdos
        jmp     dec1b   ;go to end of 1st inner loop
;       print a "|" indicating room has no east door
nedoor: mvi     c,wconf
        mvi     e,'|'
        call    bdos
;       Decrement 1st inner loop counter and loop back if not 0.
dec1b:  lda     proff   ;get printed room offset
        inr     a       ;increment accumulator
        sta     proff   ;Should now have an updated offset
        pop     b
        dcr     b       ;decrement the counter
        jnz     cloop    ;print the next line if not zero
;End of cloop
;       Print a cr/lf
        mvi     c, wrtline
        lxi     d, mcrlf
        call    bdos    ;write a carriage return/line feed
;       Do another inner (column) loop to do doors leading south
;       Some preliminaries before the column loop
        mvi     c, wrtline
        lxi     d, spc3
        call    bdos    ;write 3 spaces
;       print bottom left corner of maze
        mvi     c,wconf
        mvi     e,'+'
        call    bdos
        lhld    HLREG2  ;Restore HL to beginning of the row
        shld    HLREG1  ;Save as the working HL reg
        mvi     b,0ah   ;initialize counter to 10
cloop2: nop     ;This is the 2nd inner most column loop
        push    b;
        lhld    HLREG1  ;Can't tell who messed with it
        mov     a,m     ;get value of maze
        inx     h       ;increment address
        shld    HLREG1  ;Save it before it gets corrupted
        sta     prval   ;store it
        ani     04h     ;AND with South Mask
        jnz      nsdoor  ;no south door - print wall
;       print characters indicating room has a south door
        mvi     c,wrtline
        lxi     d,sdoori
        call    bdos
        jmp     dec2b   ;jump to decrement 2nd B counter
;       print characters indicating room has a south wall
nsdoor: mvi     c,wrtline
        lxi     d,sdoorv
        call    bdos
;       Decrement 2nd inner loop counter and loop back if not 0.
dec2b:  pop     b
        dcr     b       ;decrement the counter
        jnz     cloop2    ;print the next line if not zero
;       Print a cr/lf
        mvi     c, wrtline
        lxi     d, mcrlf
        call    bdos    ;write a carriage return/line feed
;       Decrement outer loop counter and loop back if not 0
        pop     b
        dcr     b       ;decrement the counter
        jnz     rloop    ;print the next line if not zero
;       restore registers
        pop     h
        pop     d
        pop     b
        ret
;
;       Update Maze Sub
upmazs: push    b       ;save registers
        push    d
        push    h
        lxi     h,maze  ;LOAD ADDRESS OF MAZE TO HL REGISTER
        shld    HLREG1  ;Will later be the destination address
        shld    HLREG2  ;Will later be the source address
        lda     usmaz   ;Get User Selected Maze Number
        mov     b,a     ;Move it to B
        ani     255     ;Set z flag if usmaz =0
        jz      movmaz  ;if =0, Go to move maze - no offset needed
caloop: push    b
        lhld    HLREG2
        lxi     b,100   ;load increment acmount to regs b & C
        DAD     B       ;add increment amount TO HL
        shld    HLREG2  ;Store the result
        pop     b       ;Get loop counter
        dcr     b       ;decrement the counter
        jnz     caloop  ;Add another 100 if not zero
movmaz: nop     ;Move the Maze (even if no move is needed)
;       Copy the maze from HLREG2 to HLREG1
        mvi     b,100   ;initialize counter to 100
mabyt:  push    b       ;Save B register
        lhld    HLREG2  ;load source address
        mov     a,m     ;Move byte from address in HL to accumulator
        lhld    HLREG1  ;load destination address
        mov     m,a     ;Save accum to address in HL
        lhld    HLREG1  ;load destination address
        mov     m,a     ;Save accum to address in HL
        ani     10h     ;AND with Start Mask
        jz      inxhl;  Not the start - continue
        mvi     a,100   ;load accuml with 100
        sub     b       ;Subtract B from 100
        sta     mazesrt ;Save Starting Room Offset
inxhl:  inx     h       ;increment HL
        shld    HLREG1  ;Save new destination address
        lhld    HLREG2  ;load new source address
        inx     h       ;increment HL
        shld    HLREG2  ;Save new Source address
        pop     b
        dcr     b       ;decrement
        jnz     mabyt   ;move another byte is not zero
;       restore registers
        pop     h
        pop     d
        pop     b
        ret
;
;       Press Enter to continue Sub
prentr: CALL BDOS
        LXI     D,mpentr        ;DE=ADDRESS OF Message to press enter
        MVI     C,WRTLINE       ;C=BDOS WRITE COMMAND
        CALL BDOS
;       GET  RESPONSE
        LXI     D,INBUF ;DE=POINTER TO INPUT BUFFER
        MVI     A,IBUFLEN       ;SET MAXSIZE TO READ
        MVI     C,RDLINE        ;C=BDOS READ LINE COMMAND
        CALL    BDOS
        RET
;
;*******END OF PART 3********
;*******START OF PART 4********;
;
;       DATA AREA
MSEXIT: DB      CR,LF,'THERE IS AN EXIT TO THE $'
MMEXIT: DB      CR,LF,'THERE ARE EXITS TO THE $'
MBADR:  DB      CR,LF,'I DO NOT UNDERSTAND THAT DIRECTION $'
MBADD:  DB      CR,LF,'THERE ARE NO EXITS IN THAT DIRECTION $'
MPRRM:  DB      '     PREVIOUSLY VISITED ROOM $'
MNEWRM: DB      '     NEW ROOM $'
MTRNUM: DB      CR,LF,LF,'TURN NUMBER: $'
MNRCNT: DB      '     NEW ROOMS VISITED: $'
CURROOM: DB      05H
CUROFF: DB      23H     ;CURRENT ROOM OFFSET
NMESS:  DB      'NORTH $'
SMESS:  DB      'SOUTH $'
EMESS:  DB      'EAST $'
WMESS:  DB      'WEST $'
SDMESS: DB      'SOUTH DOOR $'
NDMESS: DB      'NORTH DOOR $'
EDMESS: DB      'EAST DOOR  $'
WDMESS: DB      'WEST DOOR  $'
MPROMPT: DB      CR,LF,'PLEASE SELECT A DIRECTION (1ST LETTER IS OK): $'
INBUF:  DS      IBUFLEN+2
LREG:   DB      00H
HREG:   DB      00H
TCNT1:  DB      00H     ;LEAST SIGNIFICANT DIGITS OF THE TURN COUNT
TCNT2:  DB      00H     ;MOST SIGNIFICANT DIGIT OF THE TURN COUNT
BCDDIG: DB      00H     ;BYTE CONTAINING 2 BCD DIGITS
NRCNT:  DB      00H     ;BYTE INDICATING NEW ROOM COUNT
NORINT: DB      00H     ;BYTE INDICATING NEW ORIENTATION
OORINT: DB      00H     ;BYTE INDICATING OLD ORIENTATION
DIRFAC: DB      53H     ;BYTE INDICATING DIRECTION FACING
;
maze:
  DB  34H,06H,05H,22H,05H,06H,05H,06H,07H,05H
  DB  0AH,0DH,0AH,03H,0DH,28H,0AH,09H,28H,0CH
  DB  06H,09H,22H,05H,0EH,03H,07H,03H,05H,0CH
  DB  0CH,06H,03H,09H,28H,24H,28H,06H,09H,0CH
  DB  0CH,0CH,06H,07H,05H,0EH,05H,0CH,06H,09H
  DB  0AH,0BH,09H,28H,0AH,09H,0CH,0AH,0BH,21H
  DB  24H,06H,05H,06H,07H,07H,0BH,03H,03H,05H
  DB  0AH,09H,0CH,0CH,28H,0CH,24H,22H,05H,0CH
  DB  06H,05H,0AH,0FH,21H,0EH,0BH,05H,0CH,0CH
  DB  0A8H,0AH,03H,09H,22H,0BH,21H,28H,0AH,09H
;maze1
  DB  24H,22H,03H,03H,03H,05H,06H,07H,21H,34H
  DB  0EH,03H,03H,03H,07H,09H,0CH,0AH,03H,0DH
  DB  28H,06H,05H,22H,0FH,21H,0CH,24H,24H,0CH
  DB  06H,0DH,0AH,03H,0FH,05H,0EH,09H,0CH,0CH
  DB  0CH,0CH,06H,21H,0CH,0AH,09H,06H,09H,0CH
  DB  0CH,28H,0AH,03H,0FH,21H,24H,0AH,07H,09H
  DB  0CH,22H,05H,06H,09H,24H,0CH,22H,0DH,24H
  DB  0EH,21H,0CH,0AH,03H,0BH,0DH,24H,0AH,0DH
  DB  0EH,21H,0EH,03H,07H,03H,0DH,0EH,21H,0CH
  DB  28H,0A2H,09H,22H,0BH,21H,28H,0AH,03H,09H
;MAZE2
  DB  06H,21H,06H,07H,05H,32H,05H,06H,05H,24H
  DB  0AH,03H,09H,0CH,0EH,05H,0AH,0DH,0CH,0CH
  DB  06H,07H,05H,0CH,28H,0CH,24H,0CH,0CH,0CH
  DB  0CH,0CH,0AH,0BH,21H,0AH,0BH,09H,0AH,09H
  DB  0CH,0CH,22H,05H,22H,07H,03H,05H,22H,05H
  DB  0CH,0AH,03H,09H,24H,0AH,05H,0AH,03H,0DH
  DB  0AH,05H,24H,22H,0FH,03H,09H,06H,05H,0CH
  DB  06H,09H,0CH,22H,0DH,22H,05H,0CH,0AH,0DH
  DB  0EH,05H,0EH,03H,0FH,21H,0CH,0CH,22H,09H
  DB  28H,0AH,0BH,21H,28H,0A2H,0BH,0BH,03H,21H
;MAZE3
  DB  06H,03H,03H,05H,06H,03H,03H,05H,32H,05H
  DB  0CH,22H,05H,0AH,09H,06H,21H,0CH,06H,09H
  DB  0AH,05H,0AH,03H,07H,09H,06H,0DH,0AH,05H
  DB  06H,09H,06H,05H,0AH,05H,0CH,0CH,06H,09H
  DB  0AH,05H,28H,0AH,05H,0CH,0CH,28H,0AH,05H
  DB  06H,0BH,05H,22H,0FH,09H,0AH,03H,05H,0CH
  DB  0CH,06H,09H,06H,0DH,06H,03H,05H,0AH,09H
  DB  0CH,0CH,06H,0DH,0AH,09H,24H,0AH,07H,05H
  DB  0CH,0CH,0CH,0AH,03H,05H,0EH,07H,09H,28H
  DB  28H,0AH,09H,22H,03H,09H,0A8H,0AH,03H,21H
;MAZE4
  DB  06H,05H,16H,03H,03H,07H,21H,06H,03H,05H
  DB  0CH,0AH,09H,22H,03H,0BH,07H,0DH,06H,09H
  DB  0AH,05H,22H,07H,03H,05H,28H,28H,0AH,21H
  DB  06H,0FH,21H,0AH,21H,0AH,07H,05H,22H,05H
  DB  0CH,0AH,03H,03H,03H,03H,09H,0CH,06H,0DH
  DB  0CH,06H,03H,03H,03H,03H,05H,0AH,0DH,0CH
  DB  28H,0CH,06H,03H,03H,05H,0EH,05H,28H,0CH
  DB  06H,09H,0AH,21H,06H,09H,0CH,0EH,03H,09H
  DB  0EH,03H,03H,03H,09H,06H,0DH,28H,24H,24H
  DB  0AH,03H,03H,21H,0A2H,09H,0AH,03H,0BH,09H
;maze5
  DB  24H,24H,06H,07H,21H,34H,22H,07H,03H,21H
  DB  0CH,0CH,0CH,0CH,06H,09H,06H,0BH,03H,05H
  DB  0EH,0DH,0CH,0EH,09H,06H,0BH,03H,05H,0CH
  DB  0CH,0AH,09H,28H,06H,09H,06H,05H,28H,0CH
  DB  0EH,05H,06H,05H,0AH,03H,09H,0CH,06H,09H
  DB  0CH,0AH,09H,0AH,03H,03H,05H,0CH,0AH,21H
  DB  28H,06H,07H,21H,06H,03H,0DH,0AH,03H,05H
  DB  06H,09H,0AH,05H,0CH,22H,0BH,03H,05H,0CH
  DB  0CH,06H,03H,0BH,0BH,05H,06H,03H,0BH,09H
  DB  28H,0AH,21H,0A2H,03H,09H,0AH,03H,03H,21H
;MAZE6
  DB  22H,03H,05H,22H,05H,06H,05H,22H,15H,24H
  DB  06H,05H,0CH,06H,0DH,28H,0AH,05H,0CH,0CH
  DB  0CH,0CH,0CH,0CH,0AH,03H,03H,0DH,0EH,09H
  DB  0CH,0AH,09H,0AH,05H,06H,05H,28H,0AH,05H
  DB  0EH,05H,06H,05H,0AH,0DH,28H,06H,05H,0CH
  DB  0CH,0AH,09H,0AH,03H,0BH,03H,09H,0CH,0CH
  DB  0AH,21H,06H,03H,03H,03H,07H,21H,0AH,0DH
  DB  06H,05H,0AH,05H,06H,05H,0CH,06H,03H,09H
  DB  0CH,0CH,06H,0DH,0CH,28H,0EH,0DH,06H,05H
  DB  28H,0AH,09H,0A8H,0AH,03H,09H,0AH,09H,28H
;MAZE7
  DB  24H,34H,24H,06H,05H,24H,22H,07H,07H,05H
  DB  0AH,0BH,0BH,0DH,0AH,0BH,05H,28H,28H,0CH
  DB  24H,06H,05H,0EH,03H,21H,0EH,05H,24H,0CH
  DB  0EH,0DH,0AH,09H,22H,03H,09H,0CH,0CH,0CH
  DB  28H,0CH,22H,03H,07H,03H,05H,0CH,0EH,09H
  DB  22H,0BH,07H,05H,0AH,21H,0CH,0EH,0BH,21H
  DB  06H,05H,0CH,28H,06H,03H,0DH,0AH,03H,05H
  DB  0CH,0CH,0EH,05H,28H,06H,0DH,06H,03H,0DH
  DB  0CH,0AH,09H,0AH,05H,0CH,28H,0CH,24H,0CH
  DB  0AH,0A1H,22H,03H,09H,0AH,03H,09H,0AH,09H
;MAZE8
  DB  24H,34H,24H,06H,05H,24H,22H,07H,07H,05H
  DB  0AH,0BH,0BH,0DH,0AH,0BH,05H,28H,28H,0CH
  DB  24H,06H,05H,0EH,03H,21H,0EH,05H,24H,0CH
  DB  0EH,0DH,0AH,09H,22H,03H,09H,0CH,0CH,0CH
  DB  28H,0CH,22H,03H,07H,03H,05H,0CH,0EH,09H
  DB  22H,0BH,07H,05H,0AH,21H,0CH,0EH,0BH,21H
  DB  06H,05H,0CH,28H,06H,03H,0DH,0AH,03H,05H
  DB  0CH,0CH,0EH,05H,28H,06H,0DH,06H,03H,0DH
  DB  0CH,0AH,09H,0AH,05H,0CH,28H,0CH,24H,0CH
  DB  0AH,0A1H,22H,03H,09H,0AH,03H,09H,0AH,09H
;MAZE9
  DB  06H,07H,03H,21H,06H,31H,06H,05H,06H,05H
  DB  0CH,28H,06H,05H,0CH,06H,0DH,0CH,28H,0CH
  DB  0CH,06H,09H,0CH,0AH,09H,28H,0CH,06H,09H
  DB  0AH,09H,06H,09H,06H,03H,05H,0CH,0EH,05H
  DB  06H,03H,09H,06H,0DH,06H,09H,0CH,28H,0CH
  DB  0AH,05H,06H,09H,28H,0AH,03H,0DH,06H,0DH
  DB  06H,09H,0CH,24H,06H,03H,05H,0CH,0CH,28H
  DB  0AH,03H,09H,0AH,09H,06H,0FH,09H,0AH,05H
  DB  22H,07H,03H,07H,03H,09H,0AH,03H,05H,0CH
  DB  0A2H,0BH,21H,0AH,03H,03H,03H,21H,0AH,09H
;
mnedge: db      cr,lf,'   +---+---+---+---+---+---+---+---+---+---+',cr,lf,'$'
mcrlf:  db      cr,lf,'$'
spc3:   db      '   $'
msfs:   db      ' F $'
msss:   db      ' S $'
msxs:   db      ' X $'
msps    db      ' . $'
sdoori: db      '---+$'
sdoorv: db      '   +$'
mmazpr: db      CR,LF,'PLEASE SELECT A MAZE (0 TO 9):$'
MMAZER: DB      CR,LF,'BAD ENTRY - TRY AGAIN$';
mpentr: DB      CR,LF,'PRESS ENTER TO CONTINUE:$'
mghist: DB      CR,LF,'THE DOTS INDICATE WHERE YOU HAVE BEEN.$'
;
MRMVIEW: DB      CR,LF,'+-+-----------------------------------------+-+'
LINE2:  DB      CR,LF,'|   +                                     +   |'
LINE3:  DB      CR,LF,'|     +                                 +     |'
        DB      CR,LF,'|       +                             +       |'
        DB      CR,LF,'|         +                         +         |'
        DB      CR,LF,'|  +        +                     +        +  |'
        DB      CR,LF,'|  |  +       +-----------------+       +  |  |'
        DB      CR,LF,'|  |     +    |                 |    +     |  |'
        DB      CR,LF,'|  |        + |   +---------+   | +        |  |'
        DB      CR,LF,'|  | NORTH  | |   |         |   | | SOUTH  |  |'
        DB      CR,LF,'|  | DOOR   | |   |  EAST   |   | | DOOR   |  |'
        DB      CR,LF,'|  |        | |   |  DOOR   |   | |        |  |'
        DB      CR,LF,'|  |        | |   |         |   | |        |  |'
        DB      CR,LF,'|  |        | |   |         |   | |        |  |'
        DB      CR,LF,'|  |        | +---+---------+---+ |        |  |'
        DB      CR,LF,'|  |        +                     +        |  |'
        DB      CR,LF,'|  |      +                         +      |  |'
        DB      CR,LF,'|  |    +                             +    |  |'
        DB      CR,LF,'|  |  +                                 +  |  |'
        DB      CR,LF,'+-+-----------------------------------------+-+$'
;
MMAZEX: DB      CR,LF,'   +---+---+---+---+---+---+---+---+---+---+'
        DB      CR,LF,'   |       |       | S             |       |'
        DB      CR,LF,'   +   +   +   +---+---+---+   +   +   +   +'
        DB      CR,LF,'   |   |                       |       |   |'
        DB      CR,LF,'   +   +---+   +   +---+---+   +---+---+   +'
        DB      CR,LF,'   |       |   |       |           |       |'
        DB      CR,LF,'   +   +   +-------+---+---+---+---+   +---+'
        DB      CR,LF,'   |   |   |   * CONGRATULATIONS * |       |'
        DB      CR,LF,'   +   +   +     ----------------  +---+   +'
        DB      CR,LF,'   |   |   |        YOU HAVE       |       |'
        DB      CR,LF,'   +   +---+      SUCCESSFULLY     +   +---+'
        DB      CR,LF,'   |       |     FOUND THE MAZE    |       |'
        DB      CR,LF,'   +---+   +          EXIT.        +---+   +'
        DB      CR,LF,'   |   |   |       NICE JOB!!!     |   |   |'
        DB      CR,LF,'   +   +   +---+---+---+---+---+---+   +   +'
        DB      CR,LF,'   |   |               |       |           |'
        DB      CR,LF,'   +   +---+   +---+   +   +   +---+---+   +'
        DB      CR,LF,'   |           |       |   |               |'
        DB      CR,LF,'   +   +---+---+   +---+---+---+   +   +---+'
        DB      CR,LF,'   |       |             F |       |       |'
        DB      CR,LF,'   +---+---+---+---+---+---+---+---+---+---+$'
;
MSPLASH: DB      CR,LF,'LEJ-PROJECTS                        MARCH 2022'
        DB      CR,LF,'+-+-----------------------------------------+-+'
        DB      CR,LF,'|   +                                     +   |'
        DB      CR,LF,'|     +                                 +     |'
        DB      CR,LF,'|       +-----------------------------+       |'
        DB      CR,LF,'|       | +                         + |       |'
        DB      CR,LF,'|       |   +                     +   |       |'
        DB      CR,LF,'|       |     +-----------------+     |       |'
        DB      CR,LF,'|       |     |     MAZE029     |     |       |'
        DB      CR,LF,'|       |     |                 |     |       |'
        DB      CR,LF,'|       |     |   A MAZE GAME   |     |       |'
        DB      CR,LF,'|       |     |     FROM A      |     |       |'
        DB      CR,LF,'|       |     |  RATS EYE VIEW  |     |       |'
        DB      CR,LF,'|       |     |       BY        |     |       |'
        DB      CR,LF,'|       |     |  LLOYD JOHNSON  |     |       |'
        DB      CR,LF,'|       |     +-----------------+     |       |'
        DB      CR,LF,'|       |   +                     +   |       |'
        DB      CR,LF,'|       | +                         + |       |'
        DB      CR,LF,'|       +-----------------------------+       |'
        DB      CR,LF,'|     +                                 +     |'
        DB      CR,LF,'+-+-----------------------------------------+-+$'
;
HLREG1: DS      2
HLREG2: DS      2
prval:  db      0       ;Room Value to be printed
proff:  db      0       ;offset of room printed
usmaz:  db      5       ;User Selected Maze (0-9)
mazesrt db      4       ;offset of maze start
exitoff db      95      ;offset of maze exit
;
;       SETUP STACK SPACE
        DS      64      ; 40H LOCATIONS
STAK:   DB      0       ; TOP OF STACK (STACK BUILDS DOWNWARDS IN MEMORY)

        END
;*******END OF PART 4********
